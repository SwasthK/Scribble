generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  username              String         @unique
  password              String
  bio                   String?
  avatarUrl             String?
  avatarPublicId        String?
  role                  Role           @default(USER)
  followers             Follower[]     @relation("UserFollowers")
  following             Follower[]     @relation("UserFollowing")
  posts                 Post[]         @relation("UserPosts")
  likes                 Like[]
  savedBlog             SavedBlog[]    @relation("UserSavedBlogs")
  comments              Comment[]      @relation("UserComments")
  PostReport            PostReport[]
  socials               Social[]
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
}

model Post {
  id                 String       @id @default(uuid())
  coverImage         String?
  coverImagePublicId String?
  title              String
  shortCaption       String?
  slug               String?      @unique
  body               String
  summary            String?
  author             User         @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId           String
  likes              Like[]
  savedBy            SavedBlog[]  @relation("PostSavedBlog")
  categories         Category[]   @relation("PostCategories")
  comments           Comment[]    @relation("PostComments")
  reports            PostReport[] @relation("PostReports")
  allowComments      Boolean      @default(true)
  status             PostStatus   @default(DRAFT)
  publishedAt        DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([slug])
}

model SavedBlog {
  id        String   @id @default(uuid())
  user      User     @relation("UserSavedBlogs", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Post      Post     @relation("PostSavedBlog", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Social {
  id        String   @id @default(uuid())
  platform  String
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, userId])
}

model Follower {
  id          String   @id @default(uuid())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}

model PostReport {
  id        String         @id @default(uuid())
  post      Post           @relation("PostReports", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      PostReportType
  reason    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}


model Category {
  id        String   @id @default(uuid())
  head      String
  name      String   @unique
  slug      String   @unique
  posts     Post[]   @relation("PostCategories")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  author    User      @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?
  replies   Comment[] @relation("ParentComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
  EDITOR
  CONTRIBUTOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostReportType {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  COPYRIGHT_VIOLATION
  HATE_SPEECH
  VIOLENCE
  SELF_HARM
  ILLEGAL_ACTIVITY
  OTHER
}
